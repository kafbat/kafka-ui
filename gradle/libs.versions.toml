[versions]
spring-boot = '3.3.6'
spring-ldap = '6.3.5'


aws-msk-auth = '2.2.0'
azure-identity = '1.14.2'

apache-commons = '2.12.0'
apache-datasketches = '3.1.0'
apache-commons-compress = '1.26.0'

assertj = '3.25.3'
avro = '1.11.4'
byte-buddy = '1.14.19'
confluent = '7.8.0'

jackson = '2.14.0'
kafka-clients = '3.8.0'
mapstruct = '1.6.2'
lombok = '1.18.34'
protobuf-java = '3.25.5'
snakeyaml = '2.3'
serde-api = '1.0.0'
odd-oddrn-generator = '0.1.17'
odd-oddrn-client = '0.1.39'
cel = '0.3.0'
guava = '33.3.1-jre'
junit = '5.11.2'
mockito = '5.14.2'
okhttp3 = '4.12.0'
testcontainers = '1.20.2'
swagger-integration-jakarta = '2.2.8'
annotation-api = '2.1.1'
jackson-databind-nullable = '0.2.6'
project-reactor = '3.6.12'
micrometer = '1.13.8'
antlr = '4.12.0'
json-schema-validator = '2.2.14'


[libraries]
spring-starter-actuator = { module = 'org.springframework.boot:spring-boot-starter-actuator', version.ref = 'spring-boot' }
spring-starter-test = { module = 'org.springframework.boot:spring-boot-starter-test', version.ref = 'spring-boot' }
spring-starter-webflux = { module = 'org.springframework.boot:spring-boot-starter-webflux', version.ref = 'spring-boot' }
spring-starter-security = { module = 'org.springframework.boot:spring-boot-starter-security', version.ref = 'spring-boot' }
spring-starter-validation = { module = 'org.springframework.boot:spring-boot-starter-validation', version.ref = 'spring-boot' }
spring-starter-oauth2-client = { module = 'org.springframework.boot:spring-boot-starter-oauth2-client', version.ref = 'spring-boot' }
spring-starter-logging = {module = 'org.springframework.boot:spring-boot-starter-logging', version.ref = 'spring-boot'}
spring-boot-actuator = { module = 'org.springframework.boot:spring-boot-actuator', version.ref = 'spring-boot' }
spring-boot-devtools = { module = 'org.springframework.boot:spring-boot-devtools', version.ref = 'spring-boot' }
spring-boot-configuration-processor = { module = 'org.springframework.boot:spring-boot-configuration-processor', version.ref = 'spring-boot' }


spring-security-ldap = { module = 'org.springframework.security:spring-security-ldap', version.ref = 'spring-ldap' }

swagger-integration-jakarta = {module = 'io.swagger.core.v3:swagger-integration-jakarta', version.ref = 'swagger-integration-jakarta'}
lombok = {module = 'org.projectlombok:lombok', version.ref = 'lombok'}
mapstruct = {module = 'org.mapstruct:mapstruct', version.ref = 'mapstruct'}
mapstruct-processor = {module = 'org.mapstruct:mapstruct-processor', version.ref = 'mapstruct'}
annotation-api = {module = 'jakarta.annotation:jakarta.annotation-api', version.ref = 'annotation-api'}
jackson-databind-nullable = {module = 'org.openapitools:jackson-databind-nullable', version.ref = 'jackson-databind-nullable'}
kafka-clients = { module = 'org.apache.kafka:kafka-clients', version.ref = 'kafka-clients'}

apache-commons = { module = 'org.apache.commons:commons-lang3', version.ref = 'apache-commons'}
apache-commons-compress = { module = 'org.apache.commons:commons-compress', version.ref = 'apache-commons-compress'}
apache-commons-pool2 = { module = 'org.apache.commons:commons-pool2', version.ref = 'apache-commons'}
apache-datasketches = { module = 'org.apache.datasketches:datasketches-java', version.ref='apache-datasketches'}
apache-avro = { module = 'org.apache.avro:avro', version.ref = 'avro'}

confluent-schema-registry-client = { module = 'io.confluent:kafka-schema-registry-client', version.ref = 'confluent'}
confluent-avro-serializer = { module = 'io.confluent:kafka-avro-serializer', version.ref = 'confluent'}
confluent-protobuf-serializer = { module = 'io.confluent:kafka-protobuf-serializer', version.ref = 'confluent'}
confluent-json-schema-serializer = { module = 'io.confluent:kafka-json-schema-serializer', version.ref = 'confluent'}

aws-msk-auth = { module = 'software.amazon.msk:aws-msk-iam-auth', version.ref = 'aws-msk-auth'}
azure-identity = { module = 'com.azure:azure-identity', version.ref = 'azure-identity' }
reactor-extra = { module = 'io.projectreactor.addons:reactor-extra', version.ref = 'project-reactor'}
reactor-test = { module = 'io.projectreactor:reactor-test', version.ref = 'project-reactor'}
micrometer-registry-prometheus = { module = 'io.micrometer:micrometer-registry-prometheus', version.ref = 'micrometer'}
antlr = { module = 'org.antlr:antlr4', version.ref = 'antlr'}
antlr-runtime = { module = 'org.antlr:antlr4-runtime', version.ref = 'antlr'}
cel = {module='dev.cel:cel', version.ref='cel'}

testcontainers = {module = 'org.testcontainers:testcontainers', version.ref='testcontainers'}
testcontainers-kafka = {module = 'org.testcontainers:kafka', version.ref='testcontainers'}
testcontainers-jupiter = {module = 'org.testcontainers:junit-jupiter', version.ref='testcontainers'}

junit-jupiter-engine = {module = 'org.junit.jupiter:junit-jupiter-engine', version.ref='junit' }

mockito-core = {module = 'org.mockito:mockito-core', version.ref = 'mockito'}
mockito-jupiter = {module = 'org.mockito:mockito-junit-jupiter', version.ref = 'mockito'}

okhttp3 = {module = 'com.squareup.okhttp3:okhttp', version.ref='okhttp3'}
okhttp3-mockwebserver = {module = 'com.squareup.okhttp3:mockwebserver', version.ref='okhttp3'}
okhttp3-logging-intercepter = {module = 'com.squareup.okhttp3:logging-interceptor', version.ref='okhttp3'}

opendatadiscovery-oddrn = { module = 'org.opendatadiscovery:oddrn-generator-java', version.ref = 'odd-oddrn-generator'}
opendatadiscovery-client = { module = 'org.opendatadiscovery:ingestion-contract-client', version.ref = 'odd-oddrn-client'}

bytebuddy = {module = 'net.bytebuddy:byte-buddy', version.ref='byte-buddy'}
assertj = {module = 'org.assertj:assertj-core', version.ref = 'assertj'}
jsonschemavalidator = {module = 'com.github.java-json-tools:json-schema-validator', version.ref ='json-schema-validator'}
